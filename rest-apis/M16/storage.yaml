components:
  schemas:
    Acl:
      properties:
        owners:
          items:
            type: string
          type: array
        viewers:
          items:
            type: string
          type: array
      type: object
    BulkUpdateRecordsResponse:
      properties:
        lockedRecordIds:
          items:
            type: string
          type: array
        notFoundRecordIds:
          items:
            type: string
          type: array
        recordCount:
          format: int32
          type: integer
        recordIds:
          items:
            type: string
          type: array
        unAuthorizedRecordIds:
          items:
            type: string
          type: array
      type: object
    ConnectedOuterService:
      properties:
        name:
          type: string
        version:
          type: string
      type: object
    ConversionStatus:
      properties:
        errors:
          items:
            type: string
          type: array
        id:
          type: string
        status:
          type: string
      type: object
    CreateUpdateRecordsResponse:
      properties:
        recordCount:
          format: int32
          type: integer
        recordIdVersions:
          items:
            type: string
          type: array
        recordIds:
          items:
            type: string
          type: array
        skippedRecordIds:
          items:
            type: string
          type: array
      type: object
    DatastoreQueryResult:
      properties:
        cursor:
          type: string
        results:
          items:
            type: string
          type: array
      type: object
    Legal:
      properties:
        legaltags:
          items:
            type: string
          type: array
          uniqueItems: true
        otherRelevantDataCountries:
          items:
            type: string
          type: array
          uniqueItems: true
        status:
          enum:
          - compliant
          - incompliant
          type: string
      required:
      - otherRelevantDataCountries
      type: object
    MultiRecordIds:
      properties:
        attributes:
          items:
            type: string
          type: array
        records:
          items:
            type: string
          maxItems: 100
          minItems: 0
          type: array
      required:
      - records
      type: object
    MultiRecordInfo:
      properties:
        invalidRecords:
          items:
            type: string
          type: array
        records:
          items:
            $ref: '#/components/schemas/Record'
          type: array
        retryRecords:
          items:
            type: string
          type: array
      type: object
    MultiRecordRequest:
      properties:
        records:
          items:
            type: string
          maxItems: 20
          minItems: 1
          type: array
      required:
      - records
      type: object
    MultiRecordResponse:
      properties:
        conversionStatuses:
          items:
            $ref: '#/components/schemas/ConversionStatus'
          type: array
        notFound:
          items:
            type: string
          type: array
        records:
          items:
            type: string
          type: array
      type: object
    PatchOperation:
      properties:
        op:
          type: string
        path:
          type: string
        value:
          items:
            type: string
          type: array
      required:
      - value
      type: object
    Record:
      properties:
        acl:
          $ref: '#/components/schemas/Acl'
        ancestry:
          $ref: '#/components/schemas/RecordAncestry'
        data:
          additionalProperties:
            type: object
          type: object
        id:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
        kind:
          type: string
        legal:
          $ref: '#/components/schemas/Legal'
        meta:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        tags:
          additionalProperties:
            type: string
          type: object
        version:
          format: int64
          type: integer
      required:
      - acl
      - data
      type: object
    RecordAncestry:
      properties:
        parents:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RecordBulkUpdateParam:
      properties:
        ops:
          items:
            $ref: '#/components/schemas/PatchOperation'
          type: array
        query:
          $ref: '#/components/schemas/RecordQuery'
      required:
      - ops
      - query
      type: object
    RecordQuery:
      properties:
        ids:
          items:
            type: string
          maxItems: 500
          minItems: 1
          type: array
      required:
      - ids
      type: object
    RecordVersions:
      properties:
        recordId:
          type: string
        versions:
          items:
            format: int64
            type: integer
          type: array
      type: object
    Schema:
      properties:
        ext:
          additionalProperties:
            type: object
          type: object
        kind:
          type: string
        schema:
          items:
            $ref: '#/components/schemas/SchemaItem'
          type: array
      required:
      - kind
      - schema
      type: object
    SchemaItem:
      properties:
        ext:
          additionalProperties:
            type: object
          type: object
        kind:
          type: string
        path:
          type: string
        properties:
          items:
            $ref: '#/components/schemas/SchemaItem'
          type: array
      required:
      - kind
      - path
      type: object
    VersionInfo:
      properties:
        artifactId:
          type: string
        branch:
          type: string
        buildTime:
          type: string
        commitId:
          type: string
        commitMessage:
          type: string
        connectedOuterServices:
          items:
            $ref: '#/components/schemas/ConnectedOuterService'
          type: array
        groupId:
          type: string
        version:
          type: string
      type: object
  securitySchemes:
    Authorization:
      bearerFormat: Authorization
      scheme: bearer
      type: http
info:
  title: Storage Service
  version: '1.0'
openapi: 3.0.1
paths:
  /health:
    get:
      operationId: healthMessage
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - health-check-api
  /info:
    get:
      operationId: info
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
          description: OK
      tags:
      - info-api
  /push-handlers/legaltag-changed:
    post:
      operationId: legaltagChanged
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - pubsub-endpoints
  /query/kinds:
    get:
      operationId: getKinds
      parameters:
      - in: query
        name: cursor
        required: false
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatastoreQueryResult'
          description: OK
      tags:
      - query-api
  /query/records:
    get:
      operationId: getAllRecords
      parameters:
      - in: query
        name: cursor
        required: false
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      - in: query
        name: kind
        required: true
        schema:
          type: string
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatastoreQueryResult'
          description: OK
      tags:
      - query-api
    post:
      operationId: getRecords
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRecordIds'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRecordInfo'
          description: OK
      tags:
      - query-api
  /query/records:batch:
    post:
      operationId: fetchRecords
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRecordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRecordResponse'
          description: OK
      tags:
      - query-api
  /records:
    patch:
      operationId: updateRecordsMetadata
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordBulkUpdateParam'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateRecordsResponse'
          description: OK
      tags:
      - patch-api
    put:
      operationId: createOrUpdateRecords
      parameters:
      - in: query
        name: skipdupes
        required: false
        schema:
          type: boolean
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Record'
              maxItems: 500
              minItems: 0
              type: array
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUpdateRecordsResponse'
          description: Created
      tags:
      - record-api
  /records/delete:
    post:
      operationId: bulkDeleteRecords
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              maxItems: 500
              minItems: 0
              type: array
        required: true
      responses:
        '200':
          description: OK
      tags:
      - record-api
  /records/versions/{id}:
    get:
      operationId: getRecordVersions
      parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordVersions'
          description: OK
      tags:
      - record-api
  /records/{id}:
    delete:
      operationId: purgeRecord
      parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          description: OK
      tags:
      - record-api
    get:
      operationId: getLatestRecordVersion
      parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
      - in: query
        name: attribute
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
      tags:
      - record-api
  /records/{id}/{version}:
    get:
      operationId: getSpecificRecordVersion
      parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
      - in: path
        name: version
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: attribute
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
      tags:
      - record-api
  /records/{id}:delete:
    post:
      operationId: deleteRecord
      parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          description: OK
      tags:
      - record-api
  /schemas:
    post:
      deprecated: true
      operationId: createSchema
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
        required: true
      responses:
        '200':
          description: OK
      tags:
      - schema-api
  /schemas/{kind}:
    delete:
      deprecated: true
      operationId: deleteSchema
      parameters:
      - in: path
        name: kind
        required: true
        schema:
          type: string
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          description: OK
      tags:
      - schema-api
    get:
      deprecated: true
      operationId: getSchema
      parameters:
      - in: path
        name: kind
        required: true
        schema:
          type: string
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
          description: OK
      tags:
      - schema-api
  /whoami:
    delete:
      operationId: whoami_5
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
    get:
      operationId: whoami
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
    head:
      operationId: whoami_1
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
    options:
      operationId: whoami_6
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
    patch:
      operationId: whoami_4
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
    post:
      operationId: whoami_2
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
    put:
      operationId: whoami_3
      parameters:
      - description: Tenant Id
        in: header
        schema:
          type: string
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - whoami-controller
security:
- Authorization: []
servers:
- url: /api/storage/v2
